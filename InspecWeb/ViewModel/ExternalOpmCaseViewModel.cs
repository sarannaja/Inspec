// Generated by https://quicktype.io

namespace InspecWeb.ViewModel
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class OpmCase
    {
        [JsonProperty("ref_id")]
        public string RefId { get; set; }

        [JsonProperty("ref_code")]
        public string RefCode { get; set; }

        [JsonProperty("terminal_type_id")]
        public object TerminalTypeId { get; set; }

        [JsonProperty("date_closed")]
        public string DateClosed { get; set; }

        [JsonProperty("summary_result_by")]
        public object SummaryResultBy { get; set; }

        [JsonProperty("summary_result_by_text")]
        public object SummaryResultByText { get; set; }

        [JsonProperty("channel_incoming_id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long ChannelIncomingId { get; set; }

        [JsonProperty("channel_incoming_text")]
        public string ChannelIncomingText { get; set; }

        [JsonProperty("call_back")]
        public string CallBack { get; set; }

        [JsonProperty("channel_outgoing_id")]
        public object ChannelOutgoingId { get; set; }

        [JsonProperty("used_inform_with")]
        public string UsedInformWith { get; set; }

        [JsonProperty("customer")]
        public Account Customer { get; set; }

        [JsonProperty("account")]
        public Account Account { get; set; }

        [JsonProperty("date_occurrenced_from")]
        public string DateOccurrencedFrom { get; set; }

        [JsonProperty("date_occurrenced_to")]
        public string DateOccurrencedTo { get; set; }

        [JsonProperty("time_occurrenced")]
        public string TimeOccurrenced { get; set; }

        [JsonProperty("country_id")]
        public object CountryId { get; set; }

        [JsonProperty("country_text")]
        public object CountryText { get; set; }

        [JsonProperty("case_area")]
        public string CaseArea { get; set; }

        [JsonProperty("subdistrict_id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long SubdistrictId { get; set; }

        [JsonProperty("subdistrict_text")]
        public string SubdistrictText { get; set; }

        [JsonProperty("district_id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long DistrictId { get; set; }

        [JsonProperty("district_text")]
        public string DistrictText { get; set; }

        [JsonProperty("province_id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long ProvinceId { get; set; }

        [JsonProperty("province_text")]
        public string ProvinceText { get; set; }

        [JsonProperty("postcode")]
        public string Postcode { get; set; }

        [JsonProperty("latitude")]
        public string Latitude { get; set; }

        [JsonProperty("longitude")]
        public string Longitude { get; set; }

        [JsonProperty("case_value")]
        public long CaseValue { get; set; }

        [JsonProperty("severity_id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long SeverityId { get; set; }

        [JsonProperty("severity_text")]
        public string SeverityText { get; set; }

        [JsonProperty("priority_id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long PriorityId { get; set; }

        [JsonProperty("priority_text")]
        public string PriorityText { get; set; }

        [JsonProperty("secret_id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long SecretId { get; set; }

        [JsonProperty("secret_text")]
        public string SecretText { get; set; }

        [JsonProperty("is_secret")]
        public string IsSecret { get; set; }

        [JsonProperty("is_in_court")]
        public string IsInCourt { get; set; }

        [JsonProperty("is_in_court_text")]
        public string IsInCourtText { get; set; }

        [JsonProperty("remark")]
        public string Remark { get; set; }

        [JsonProperty("tq_key")]
        public object TqKey { get; set; }

        [JsonProperty("created")]
        public string Created { get; set; }

        [JsonProperty("created_by")]
        public string CreatedBy { get; set; }

        [JsonProperty("updated")]
        public string Updated { get; set; }

        [JsonProperty("updated_by")]
        public string UpdatedBy { get; set; }

        [JsonProperty("list_case_org_owner")]
        public ListCaseOrgOwner[] ListCaseOrgOwner { get; set; }

        [JsonProperty("list_case_attachment")]
        public object[] ListCaseAttachment { get; set; }

        [JsonProperty("case_id")]
        public string CaseId { get; set; }

        [JsonProperty("case_code")]
        public string CaseCode { get; set; }

        [JsonProperty("objective_id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long ObjectiveId { get; set; }

        [JsonProperty("objective_text")]
        public string ObjectiveText { get; set; }

        [JsonProperty("inform_to_id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long InformToId { get; set; }

        [JsonProperty("inform_to_text")]
        public string InformToText { get; set; }

        [JsonProperty("type_id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long TypeId { get; set; }

        [JsonProperty("type_text")]
        public string TypeText { get; set; }

        [JsonProperty("status_id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long StatusId { get; set; }

        [JsonProperty("status_text")]
        public string StatusText { get; set; }

        [JsonProperty("summary")]
        public string Summary { get; set; }

        [JsonProperty("detail")]
        public string Detail { get; set; }

        [JsonProperty("defendant")]
        public string Defendant { get; set; }

        [JsonProperty("date_opened")]
        public string DateOpened { get; set; }

        [JsonProperty("sla")]
        public long Sla { get; set; }

        [JsonProperty("ShowDateTime")]
        public string ShowDateTime { get; set; }

        [JsonProperty("timeline_type")]
        public object TimelineType { get; set; }

        [JsonProperty("summary_result")]
        public string SummaryResult { get; set; }

        [JsonProperty("created_by_text")]
        public string CreatedByText { get; set; }

        [JsonProperty("updated_by_text")]
        public string UpdatedByText { get; set; }

        [JsonProperty("role_option")]
        public RoleOption RoleOption { get; set; }

        [JsonProperty("count_operating")]
        public long CountOperating { get; set; }

        [JsonProperty("token_id")]
        public string TokenId { get; set; }
    }

    public partial class Account
    {
        [JsonProperty("account_type", NullValueHandling = NullValueHandling.Ignore)]
        public string AccountType { get; set; }

        [JsonProperty("account_type_text", NullValueHandling = NullValueHandling.Ignore)]
        public string AccountTypeText { get; set; }

        [JsonProperty("number_of_people")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long NumberOfPeople { get; set; }

        [JsonProperty("is_secret")]
        public string IsSecret { get; set; }

        [JsonProperty("list_account_detail", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, string>[] ListAccountDetail { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("ref_id")]
        public string RefId { get; set; }

        [JsonProperty("country_id")]
        public string CountryId { get; set; }

        [JsonProperty("country_name")]
        public string CountryName { get; set; }

        [JsonProperty("nationality_id")]
        public object NationalityId { get; set; }

        [JsonProperty("nationality_name")]
        public object NationalityName { get; set; }

        [JsonProperty("salutation_th")]
        public string SalutationTh { get; set; }

        [JsonProperty("firstname_th")]
        public string FirstnameTh { get; set; }

        [JsonProperty("lastname_th")]
        public string LastnameTh { get; set; }

        [JsonProperty("salutation_en")]
        public object SalutationEn { get; set; }

        [JsonProperty("firstname_en")]
        public object FirstnameEn { get; set; }

        [JsonProperty("lastname_en")]
        public object LastnameEn { get; set; }

        [JsonProperty("gender_id")]
        public string GenderId { get; set; }

        [JsonProperty("gender_text")]
        public string GenderText { get; set; }

        [JsonProperty("citizen_id")]
        public string CitizenId { get; set; }

        [JsonProperty("birthday")]
        public object Birthday { get; set; }

        [JsonProperty("address")]
        public string Address { get; set; }

        [JsonProperty("subdistrict_id")]
        public string SubdistrictId { get; set; }

        [JsonProperty("subdistrict_text")]
        public object SubdistrictText { get; set; }

        [JsonProperty("district_id")]
        public string DistrictId { get; set; }

        [JsonProperty("district_text")]
        public object DistrictText { get; set; }

        [JsonProperty("province_id")]
        public string ProvinceId { get; set; }

        [JsonProperty("province_text")]
        public object ProvinceText { get; set; }

        [JsonProperty("postcode")]
        public string Postcode { get; set; }

        [JsonProperty("special_info")]
        public object SpecialInfo { get; set; }

        [JsonProperty("special_info_text")]
        public object SpecialInfoText { get; set; }

        [JsonProperty("remark")]
        public string Remark { get; set; }

        [JsonProperty("is_defective")]
        public object IsDefective { get; set; }

        [JsonProperty("role_option")]
        public object RoleOption { get; set; }

        [JsonProperty("is_enable")]
        public object IsEnable { get; set; }

        [JsonProperty("tq_key")]
        public string TqKey { get; set; }

        [JsonProperty("created_by_text")]
        public string CreatedByText { get; set; }

        [JsonProperty("updated_by_text")]
        public string UpdatedByText { get; set; }

        [JsonProperty("created")]
        public string Created { get; set; }

        [JsonProperty("created_by")]
        public string CreatedBy { get; set; }

        [JsonProperty("updated")]
        public string Updated { get; set; }

        [JsonProperty("updated_by")]
        public string UpdatedBy { get; set; }

        [JsonProperty("customer_type", NullValueHandling = NullValueHandling.Ignore)]
        public string CustomerType { get; set; }

        [JsonProperty("customer_type_text", NullValueHandling = NullValueHandling.Ignore)]
        public string CustomerTypeText { get; set; }

        [JsonProperty("list_customer_detail", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, string>[] ListCustomerDetail { get; set; }
    }

    public partial class ListCaseOrgOwner
    {
        [JsonProperty("case_id")]
        public string CaseId { get; set; }

        [JsonProperty("org_id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long OrgId { get; set; }

        [JsonProperty("line")]
        public long Line { get; set; }

        [JsonProperty("org_text")]
        public string OrgText { get; set; }

        [JsonProperty("case_org_status_id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long CaseOrgStatusId { get; set; }

        [JsonProperty("case_org_status_text")]
        public string CaseOrgStatusText { get; set; }

        [JsonProperty("case_org_summary_result")]
        public string CaseOrgSummaryResult { get; set; }

        [JsonProperty("created")]
        public string Created { get; set; }

        [JsonProperty("created_by")]
        public string CreatedBy { get; set; }

        [JsonProperty("created_by_text")]
        public string CreatedByText { get; set; }

        [JsonProperty("updated")]
        public string Updated { get; set; }

        [JsonProperty("updated_by")]
        public string UpdatedBy { get; set; }

        [JsonProperty("updated_by_text")]
        public string UpdatedByText { get; set; }

        [JsonProperty("role_option")]
        public object RoleOption { get; set; }
    }

    public partial class RoleOption
    {
        [JsonProperty("is_open")]
        public bool IsOpen { get; set; }

        [JsonProperty("is_insert")]
        public bool IsInsert { get; set; }

        [JsonProperty("is_update")]
        public bool IsUpdate { get; set; }

        [JsonProperty("is_delete")]
        public bool IsDelete { get; set; }

        [JsonProperty("is_search")]
        public bool IsSearch { get; set; }

        [JsonProperty("is_download")]
        public bool IsDownload { get; set; }

        [JsonProperty("is_print")]
        public bool IsPrint { get; set; }

        [JsonProperty("is_extra")]
        public bool IsExtra { get; set; }

        [JsonProperty("is_admin")]
        public bool IsAdmin { get; set; }
    }

    public partial class OpmCase
    {
        public static OpmCase FromJson(string json) => JsonConvert.DeserializeObject<OpmCase>(json, OpmCaseConverter.Settings);
    }

    public static class OpmCaseSerialize
    {
        public static string ToJson(this OpmCase self) => JsonConvert.SerializeObject(self, OpmCaseConverter.Settings);
    }

    internal static class OpmCaseConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters = {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class OpmCaseConverterParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
